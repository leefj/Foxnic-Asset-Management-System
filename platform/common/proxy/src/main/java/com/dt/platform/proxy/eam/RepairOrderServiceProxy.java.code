package com.dt.platform.proxy.eam;

import org.springframework.web.bind.annotation.RequestMapping;
import org.github.foxnic.web.proxy.api.APIProxy;
import org.github.foxnic.web.proxy.FeignConfiguration;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.github.foxnic.web.proxy.bpm.BpmCallbackController;
import org.github.foxnic.web.domain.bpm.BpmActionResult;
import org.github.foxnic.web.domain.bpm.BpmEvent;

import org.springframework.cloud.openfeign.FeignClient;


import com.dt.platform.domain.eam.RepairOrder;
import com.dt.platform.domain.eam.RepairOrderVO;
import java.util.List;
import com.github.foxnic.api.transter.Result;
import com.github.foxnic.dao.data.PagedList;
import com.dt.platform.proxy.ServiceNames;

/**
 * <p>
 * 故障申请单 控制器服务代理
 * </p>
 * @author 金杰 , maillank@qq.com
 * @since 2023-08-16 07:35:56
*/

@FeignClient(value = ServiceNames.EAM, contextId = RepairOrderServiceProxy.API_CONTEXT_PATH , configuration = FeignConfiguration.class)
public interface RepairOrderServiceProxy  extends BpmCallbackController {

	/**
	 * 基础路径 , service-eam
	*/
	public static final String API_BASIC_PATH = "service-eam";

	/**
	 * API 上下文路径 , eam-repair-order
	*/
	public static final String API_CONTEXT_PATH = "eam-repair-order";

	/**
	 * API 基础路径 , 由 API_BASIC_PATH 和 API_CONTEXT_PATH 两部分组成
	*/
	public static final String API_PREFIX = "/" + API_BASIC_PATH + "/"+API_CONTEXT_PATH+"/";

	/**
	 * 添加故障申请单
	 */
	public static final String INSERT = API_PREFIX + "insert";

;
	/**
	 * 删除故障申请单
	 */
	public static final String DELETE = API_PREFIX + "delete";

	/**
	 * 批量删除故障申请单
	 */
	public static final String DELETE_BY_IDS = API_PREFIX + "delete-by-ids";

	/**
	 * 更新故障申请单
	 */
	public static final String UPDATE = API_PREFIX + "update";


	/**
	 * 保存故障申请单
	 */
	public static final String SAVE = API_PREFIX + "save";

	/**
	 * 获取单个故障申请单
	 */
	public static final String GET_BY_ID = API_PREFIX + "get-by-id";

	/**
	 * 获取多个故障申请单
	 */
	public static final String GET_BY_IDS = API_PREFIX + "get-by-ids";

	/**
	 * 查询故障申请单
	 */
	public static final String QUERY_LIST = API_PREFIX + "query-list";

	/**
	 * 分页查询故障申请单
	 */
	public static final String QUERY_PAGED_LIST = API_PREFIX + "query-paged-list";


	/**
	  * 流程事件回调接收接口
	  */
	public static final String BPM_CALLBACK = API_PREFIX + "bpm-callback";


	/**
	 * 添加故障申请单
	 */
	@RequestMapping(RepairOrderServiceProxy.INSERT)
	Result insert(RepairOrderVO repairOrderVO);

	/**
	 * 删除故障申请单
	 */
	@RequestMapping(RepairOrderServiceProxy.DELETE)
	Result deleteById(String id);

	/**
	 * 批量删除故障申请单
	 */
	@RequestMapping(RepairOrderServiceProxy.DELETE_BY_IDS)
	Result deleteByIds(List<String> ids);

	/**
	 * 更新故障申请单
	 */
	@RequestMapping(RepairOrderServiceProxy.UPDATE)
	Result update(RepairOrderVO repairOrderVO);

	/**
	 * 更新故障申请单
	 */
	@RequestMapping(RepairOrderServiceProxy.SAVE)
	Result save(RepairOrderVO repairOrderVO);

	/**
	 * 获取故障申请单
	 */
	@RequestMapping(RepairOrderServiceProxy.GET_BY_ID)
	Result<RepairOrder> getById(String id);

	/**
	 * 获取多个故障申请单
	 */
	@RequestMapping(RepairOrderServiceProxy.GET_BY_IDS)
	Result<List<RepairOrder>> getByIds(List<String> ids);
	/**
	 * 查询故障申请单
	 */
	@RequestMapping(RepairOrderServiceProxy.QUERY_LIST)
	Result<List<RepairOrder>> queryList(RepairOrderVO sample);



	/**
	 * 分页查询故障申请单
	 */
	@RequestMapping(RepairOrderServiceProxy.QUERY_PAGED_LIST)
	Result<PagedList<RepairOrder>> queryPagedList(RepairOrderVO sample);

	/**
	 * 分页查询故障申请单
	 */
	@RequestMapping(RepairOrderServiceProxy.BPM_CALLBACK)
	BpmActionResult onProcessCallback(BpmEvent event);




	/**
	 * 控制器类名
	 * */
	public static final String CONTROLLER_CLASS_NAME="com.dt.platform.eam.controller.RepairOrderController";

	/**
	 * 统一的调用接口，实现在单体应用和微服务应用下的无差异调用
	 * */
	public static RepairOrderServiceProxy api() {
		return APIProxy.get(RepairOrderServiceProxy.class,CONTROLLER_CLASS_NAME);
	}

}